#Introduction to HTML Forms
Forms are a part of everyday life. When we use a physical form in real life, we write down information and give it to someone to process. Think of the times you've had to fill out information for various applications like a job, or a bank account, or dropper of a completed suggestion card- each instance is  form!
Just like a physical form, and HTML <form> element is responsible for collecting information to send somewhere else. Every time we browse the internet we come into contatct with many forms and we might not even realize it. There's a good change that is you're typing into a text field or pvodidng an input, the field that you're typing into is part of a <form>!. In this lesson, we’ll go over the structure and syntax of a <form> and the many elements that populate it.

#How a Form Works
We can think of the internet as a newtowkr of computers which send and receive information. Computers need an HTTp request to know how to communicate. The HTTP request instructs the receiving computer how to handle the incoming information. More information can be found in our article about HTTP requests. The <form> element is a great tool for collecting information, but when we need to send that information somewhere else for processing. We need to supply the <form> element with bot the location of where the <fomr>'s information goes and what HTTP request to make. Take a look at the sample <form> below:
[<form action="/example.html" method="POST">
</form>]
In the above example, we've created the skeleton for a <form> that will send information to example.html as a POST request:
--> The action attribute determines where the information is sent.
--> The method attribute is assigned a HTTP verb that is included in the HTTP request.
Note: HTTP verbs liks POST do not need to be capitalized for the request to work, but it's done so out of convention. In the example aboce we could have written method="post" and it would still work. The <form> element can also contain child elements. For instance, it would be helpful to provide a header so that users know what this <form> is about. We could also add a paragraph to provide even more detail. Let’s see an example of this in code:
[<form action="/example.html" method="POST">
  <h1>Creating a form</h1>
  <p>Looks like you want to learn how to create an HTML form. Well, the best way to learn is to play around with it.</p>
</form>]
The example above doesn’t collect any user input, but we’ll do that in the next exercise. For now, let’s practice making the foundation of an HTML <form>!

TEXT INPUT
If we want to create and input field in our <form>, we'll need the help of the <input> element. The <input> element has a type attribute which determines how it renders on the web page and what kind of data it can accept. The first value for the type attribute we're going to explire is "text". When we create and <input> element with type="text", it renders a text field that users can type into. It's also important that we include a name attribute for the <input>- without the name attribute, information in the <inpuot> won't be sent when the <form> is submitted. We'll explain more about submissions and the submit button in a later exercies and the submit button in a later exercies. For now, let's exampine the following code that produces a text input field:
[<form action="/example.html" method="POST">
<input type="text" name="first-text-field">
</form>]
Here's a screen shot of how the rendered form looks like on a web page for the Chrome browser (different browsers have different default rendering). When initially loaded, it will be an empty box:
[GAMBAR]
After users type into the <input> element the value of the value attribute becomes what is typed into the text field. The value of the value attribute is paired with the value of the name attribute and sent as text when the form is submitted. For instance, it a user typed in "importatn details" in the text field created by our <input> element:
[GAMBAR]
When the form is submitted, the text: "first-text-field = importatn details" is sent to /example.html because the value of the name attribute is "first-text-field" and the value of value is "important details". We could also assign a default value for the value attribute so that users have a pre-filled text field when they first see the rendererd form like so:
[<form action="/example.html" method="POST">
<input type="text" name="first-text-field" value="already pre-filled">
</form>]

ADDING A LABEL
In the previous exercise we created an <input> element but we didn't include anything to explain what the <input> is used for. For a user to properly identify an <input> we use the appropriately named <label> element. The <label> element has an opening and closing tag and displays text that is written between the opening and closing tags. To associate a <label> and an <inpuot>, the <inpuot> nneds an id attribute. We then assign the for attribute of the <label> element with the value of the id attribute of <input>. like so:
[<form action="/example.html" method="POST">
<label form="meal">What do you want to eat?</label>
<br>
<input type="text" name="food" id="meal">
</form>]
The code aboce renders:
[GAMBAR]
Look, now users know what the input element is for! Another benefit for using the <label> element is when this element in clicked, the corresponding <input> is highlighere/selected. Let’s see the <label> element in action!

PASSWORD INPUT
Think about all those times we have to put sensitive information, like a password or PIN, into a <form>. WWe wouldn’t want our information to be seen by anyone peeking over our shoulder! Luckily, we have the type="password" attribute for <input>!
An <input type="password"> element will replace input text with another character like an asterisk (*) or a dot (.). The code below provides an example of how to create a password field:
[<form>
  <label for="user-password">Passwork: </label>
  <input type="password" id="user-password" name="user-password">
</form>]
After a user types into the field, it would look like:
[GAMBAR]
Even though the password field obscures the text of the password, when the form is submitted, the value of the text is sent. In other words, if “hunter2” is typed into the password field, “user-password=hunter2” is sent along with the other information on the form.

NUMBER INPUT
We’ve now gone over two type attributes for <input> related to text. But, we might want our users to type in a number — in which case we can set the type attribute to… (you guessed it)… "number"!. By setting type="number" for an <input> we can restrict what users type inpout the input field ot jsut numbers (and a few special characters like -, _, and .). We can also provide a step attribute which creates arrows inside the input field to increase or decrease by the value of the step attribute. Below is the code needed to render an input field for numbers:
[<form>
  <label for="years">Years of experience : </label>
  <input id="years" name="years" type="number" step="1">
</form>]
Which renders:
[GAMBAR]
Now it’s time to apply this knowledge.

RANGE INPUT
Using an <input type="number"> is great if we want to allow users to type in any number of their choosing. But, if we wanted to limit what numbers our users could type we might consider using a different type value. Another option we could use is setting type to "range" which creates a slider. To set the minimum and maximum values of the slider we ssign values to the min and max attribute of the <input>. We could also control how smooth and fluid the slider works by assigning the step attribute a value. Smaller step values will make the slider more fluidly, whereas larger step values will make the slider move more noticeably. Take a llook at the code to create a slider.
[<form>
  <label for="volume"> Volume Control </label>
  <input id="volume" name="volume" type="range" min="0" max="100" step="1">
</form>]
The code above renders:
[GAMBAR]
In the example above, every time the slider moves by one, the value of the <input>‘s value attribute changes.

CHECKBOX INPUT
So far the types of inputs we’ve allowed were all single choices. But, what if we presented multiple options to users and allow them to select any number of options? Sounds like we could use checkboxes! In a <form> we would use the <input> element and set type="checkbox". Examine the code used to create multiple checkboxes:
[<form>
  <p>Choose your pizza toppings:</p>
  <label for="cheese">Extra cheese</label>
  <input id="cheese" name="topping" type="checkbox" value="cheese">
  <br>
  <label for="pepperoni">Pepperoni</label>
  <input id="pepperoni" name="topping" type="checkbox" value="pepperoni">
  <br>
  <label for="anchovy">Anchovy</label>
  <input id="anchovy" name="topping" type="checkbox" value="anchovy">
</form>]
Which renders:
[GAMBAR]
Notice in the example provided:
--> There are assigned values to the value attribute of the checkboxes. These vallues are not visible on the form irself, that's why it is important that we use an associated <label> to identify the checkbox.
--> each <input> has the same value for the name attribute. Using the same name for each checkbox groups the <input>s together. However, each <input> has a unique id to pair with a <label>
Alright, time to use checkboxes in our code!

RADIO BUTTON INPUT
Checkboxes work well if we want to present users with multiple options and let them choose one or more of the options. However, there are cases where we want to present multiple options and only allow for one selection — like asking users if they agree or disagree with the terms and conditions. Let’s look over the code used to create radio buttons:
[<form>
  <p>What is sum of 1 + 1?</p>
  <input type="radio" id="two" name="answer" value="2">
  <label for="two">2</label>
  <br>
  <input type="radio" id="eleven" name="answer" value="11">
  <label for="eleven">11</label>
</form>]
which renders:
[GAMBAR]
Notice from the code snippet, radio buttons (like checkboxes) do not display their value. We have associated <label> to represent the value of the radio button. to group radio buttons together, we assign them the same name an only on radio button from that group can be selected.
Let’s see this in action by creating our own radio buttons.

DROPDOWN LIST
Radio buttons are great if we want our users to pick one option out of a few visible options, but imagine if we have a whole list of options! This situation could quickly lead to a lot of radio buttons to keep track of.
An alternative solution is to use a dropdown list to allow our users to choose one option from an organized list. Here’s the code to create a dropdown menu:
[<form>
  <label for="lunch">What's for lunch?</label>
  <select id="lunch" name="lunch">
    <option value="pizza">Pizza</option>
    <option value="curry">Curry</option>
    <option value="salad">Salad</option>
    <option value="ramen">Ramen</option>
    <option value="tacos">Tacos</option>
  </select>
</form>]
Which renders:
[ GAMBAR ]
And if we click on the field containing the first option, the list is revealed:
[ GAMBAR ]
Notice in the code that we're using the element <select> to create the dropdown list. To populate the dropdown list, we add multiple <option> elements, each with a value attribute. By default, only one of these options can be selected. The text rendered is the text included between the opening and closing <option> tags. Howeverr, it is the value of the value attribute that is used in <form> submission (notice the difference in the text and value capitalization). When the <form> is submitted, the information from this input field will be sent using the name of the <select> and the value of the chose <option>. For instance, if a user selected Pizza from the dropdown list, the information would be sent as "lunch=pizza".

DATAILIST INPUT
Even if we have an organized dropdown list, if the list has a lot of options, it could be tedious for users to scroll through the entire list to locate one option. That’s where using the <datalist> element comes in handy.
The <datalist> is used with an <input type="text"> element. The <input> creates a text field that users can type into and filter options from the <datalist>. Let's go over a concrete example:
[<form>
  <label for="city">Ideal city to visit?</label>
  <input type="text" list="cities" id="city" name="city">

  <datalist id="cities">
    <option value="New York City"></option>
    <option value="Tokyo"></option>
    <option value="Barcelona"></option>
    <option value="Mexico City"></option>
    <option value="Melbourne"></option>
    <option value="Other"></option>  
  </datalist>
</form>]
Notice, in the code above, we have an <input> that has a list attribute. The <input> is associated to the <datalist> via the <input>'s list attribute and the id of the <datalist>. 
While <select> and <datalist> share some similarities, there are some major differences. In the associated <input> element, users can type in the input field to search for a particular option. If none of the <option>s match. When the form is submitted, the value of the <input>s name and the value of the option selected, or what the user typed in, is sent as a pair. Now it’s time to make a <datalist> of our own!

TEXTAREA ELEMENT
An <input> element with type="text" creates a single row input field for users to type in information. However, there are cases where users need to write in more information, like a blog post. In such cases, instead of using an <input>, we could use <textarea>. The <textarea> element is used to createa a bigger field for users to write more text. We can add the attributes rows and cols to determine the amount of rows and colulmnts for the <textarea>. Take a look:
[<form>
  <label for="blog">New Blog Post: </label>
  <br>
  <textarea id="blog" name="blog" rows="5" cols="30">
  </textarea>
</form>]
In the code above, an empty <textarea> that is 5 rows by 30 columns is rendered to the page like so:
[GAMBAR]
If we wanted an even bigger text field, we could click and drag on the bottom right corner to expand it.
When we submit the form, the value of <textarea> is the text written inside the box. If we want to add a default value to text to <textarea> we could include it within the opening and closing tags like so:
[ <textarea>Adding default text</textarea> ] 
This code will render a <textarea> that contains pre-filled text: “Adding default text”.
But don’t just take our word for it, let’s test it out!

SUBMIT FORM
Remember, the purpose of a form is to collect information that will be submitted. That’s the role of the submit button — users click on it when they are finished with filling out information in the <form> and they’re ready to send it off. Now that we’ve gone over how to create various input elements, let’s now go over how to create a submit button!
To make a submit button in a <form>, we're going to use the reliable <input> element and set the type to "submit". For instance:
[<form>
  <input type="submit" value="Send">
</form>]
Notice in the code snipet that the value assigned to the <input> shows up as text on the submit button. If there isn't a value attribute, the default text, Submit shows up on the button. Let’s now add this element to make our <form>s complete!

REVIEW#3
Nice work interacting with the extremely common and useful <form> element!
In this lesson we went over:
--> The purpose of a <form> is to allow users to input information and send it.
--> The <form>'s action attribute determines where the form's information goes. 
--> The <form>s method attribute determines how the information is sent and processed.
--> To add fields for users to input information we use the <input> element and set the type attribute to field of our choosing:
{--> setting type to "text" creates a single row Setting type to "range" creates a slider to select from a range of numbers.
--> Setting type to "checkbox" creates a single checkbox which can be paired with other checkboxes.
--> Setting type to "radio" creates a radio button that can be paired with other radio buttons.
--> Setting type to "list" will pair the <input> with a <datalist> element if the id of both are the same.
--> Setting type to "submit" creates a submit button.
}
--> A <select> element is populated with <option> elements and renders a dropdown list selection.
--> A <datalist> element is populated with <option> elements and works with an <input> to search through choices.
--> A <textarea> element is a text input field that has a customizable area.
--> When a <form> is submitted, the name of the fields that accept input and the value of those fields are sent as name=value pairs.
Using the <form> element in conjunction with the other elements listed above allows us to create sites that take into consideration the wants and needs of our users. Tak the opportunity to take what you've lerned, and apply it!

--------------==================================---------------
Form Validation
REQUIRING AN INPUT
Sometimes we have fields in our <fomr>s which are not optional, i.e. here must be information provided before we can submit it. To enforce this rule, we can add the required attribute to an <input> element. Take for example:
[form action="/example.html" method="POST">
  <label for="allergies">Do you have any dietary restrictions?</label>
  <br>
  <input id="allergies" name="allergies" type="text" required>
  <br>
  <input type="submit" value="Submit">
</form>]
This renders a text box, and if we try to submit the <form> without filling it out we get this message:
The styling of the message above varies form browser to browser, the picture above depicst the message in aChrome browser. We’ll also continue to show these messages as they appear in Chrome in later exercises. Let’s see how it shows up in your browser!

SET A MINIMUM ADN MAXIMUM
Another buil-in validation we can use is to assign minimum or maximum alue for a number field, i.g. <input type="number"> and <input type="range">. To set a minimum acceptable value, we use the min attribute and assign a value. On the flip side, to set a maximum acceptable value, we assign the max attribute a value. Let’s see this in code:
[<form action="/example.html" method="POST">
  <label for="guests">Enter # of guests:</label>
  <input id="guests" name="guests" type="number" min="1" max="4">
  <input type="submit" value="Submit">
</form>]
If a user tries to submit an input that is less than 1 a warning will appear:
A similar message will appear if a user tries to input a number greater than 4. Let’s now see this action.

CHECKING TEXT LENGTh
n the previous exercise, we were able to use min and max to set acceptable minimum and maximum values in a number field. But what about text fields? There are certainly cases where we wouldn’t want our users typing more than a certain number of characters (think about the character cap for messages on Twitter). We might even want to set a minimum number of characters. Conveniently, there are built-in HTML5 validations for these situations.
To set a minimum number of characters for a text field, we add the minlength attribute and a value to set a minimum value. Similarly, to set the maximum number of charactiers for a text field, we user the  maxlength attribute and set a maximum value. Let’s take a look at these attributes in code:
[<form action="/example.html" method="POST">
  <label for="summary">Summarize your feelings in less than 250 characters</label>
  <input id="summary" name="summary" type="text" minlength="5" maxlength="250" required>
  <input type="submit" value="Submit">
</form>]
If a user tries to submit the <form> with less than the set minimum, this message appears:
And if a user tries to type in more than the maximum allowed number of characters, they don’t get a warning message, but they can’t type it in! Let’s add this validation to our <form>.

MATCHING A PATTERN
In addition to checking the length of a text, we could  also add a validation to check how the text was provided. For cases when we want user input to follow specific guidelines, awe use the pattern attribute and assign it a regular expresson, or regex. Regular expressions are a sequence of characters that make up a search pattern. If the input matches the regex, the form can be submitted. Let’s say we wanted to check for a valid credit card number (a 14 to 16 digit number). We could use the regex: [0-9]{14,16} which checks that the user provided only numbers and that they entered at least 14 digits and at most 16 digits.
To add this to a form:
<form action="/example.html" method="POST">
  <label for="payment">Credit Card Number (no spaces):</label>
  <br>
  <input id="payment" name="payment" type="text" required pattern="[0-9]{14,16}">
  <input type="submit" value="Submit">
</form>
With the pattern in place, users can’t submit the <form> with a number that doesn’t follow the regex. When they try, they’ll see a validation message like so:
If you want to find out more about Regex, read more at MDN’s regex article.
To see it in practice, let’s use the pattern attribute in our HTML!

REVIEW #2
Awesome job adding client-side validation to <form>s!
Let’s quickly recap:
--> Client-side validations happen in the browser before information is sent to a server.
--> Adding the required attribut to an input related element will validate that the input field has informatin in it.
--> Assigning a value to the min attribute of a number input element will validate an acceptable minimum value.
--> Assigning a value to the max attribute of a number input element will validate an acceptable maximum value.
--> Assigning a value to the minlength attribute of a text input element will validate an acceptable minimum number of characters.
--> Assigning a value to the maxlength attribute of a text input element will validate an acceptable maximum number of characters.
--> Assigning a regex to pattern matches the input to the provided regex.
--> If validations on a <form> do not pass, the user gets a message explaining why and the <form> cannot be submitted.
The quick hecks help ensure that input data is correct and safe for our servers. It also helps give users immediate feedback on what they need to fix instead of having to wait for a server to send back that information.

QUIZZZ
1. Why does the code provided not create a working <datalist> element?
[<form action="/quiz.html" method="POST">
  <label for="choice">What's wrong with this code?</label>
  <input id="choice" type="text" name="find-the-answer">
  <datalist id="menu-options">
      <option value="one"></option>
      <option value="two"></option>
      <option value="three"></option>
  </datalist>
</form>]
ANS: the <input> doesn't have a list attribute to associate itself with the <datalist>

2. What is rendered on the web page as a result of the code provided?
[<form action="/processing.html" method="GET">
  <label for="mystery">What gets rendered?</label>
  <input type="range" id="mystery" name="mystery" min="0" max="100" step="10">
</form>]
ANS: A form containing a slider that has a maximum value of 100, a minimum of 0 moves in steps of 10

3. What attribute should you add to a <input> element if you want to ensure that users provide a response?
ANS: required

4. How are radio buttons different from checkboxes?
ANS: You can select multiple checkboxes but only one radiobutton

5. What is an appropriate scenario for using an <input> element with the type set to "radio"?
ANS: When you want to present users with multiple options and have them choose ONLY ONE

6. Based on the code provided, why will the information from the first <input> element NOT be sent to /processing.html when the form is submitted?
[<form action="/processing.html" method="GET">
  <input type="text" id="username">
  <input type="submit" value="submit"> 
</form>]
ANS: The first <input> element is missing the name attribute which omits the <input>s information

7. What is a benefit of implementing client-side validation?
ANS: It savces us time from having to send information to the server and wait for the server to respond

8. True or False: You can assign default text to a <textarea> element by adding text between the opening and closing <textarea> tags.
ANS: True

9. How can we render a dropdown list in a <form>?
ANS: Add a <select> element with <option> elements nested inside.

10. What is a benefit of using the <label> element?
ANS: Clicking on the <label> element will focus on the tesxt field of the associated <input> element

